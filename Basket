#include "pebble.h"
#include  "time.h"

#define MATH_PI 3.141592653589793238462
#define NUM_DISCS 3
#define DISC_DENSITY 0.25
#define ACCEL_RATIO 0.05
#define ACCEL_STEP_MS 50

int x=5,y=120, score=0,base=0,v=5;
char str_score [ 3];

char str_current_score [6];
TextLayer *text_layer;
typedef struct Vec2d {
  double x;
  double y;
} Vec2d;

typedef struct Disc {
#ifdef PBL_COLOR
  GColor color;
#endif
  Vec2d pos;
  Vec2d vel;
  double mass;
  double radius;
} Disc;


static Window *s_main_window;
static Layer *s_disc_layer;

static Disc disc_array[NUM_DISCS];
static GRect window_frame;

static double disc_calc_mass(Disc *disc) {
  return MATH_PI * disc->radius * disc->radius * DISC_DENSITY;
}

static void disc_init(Disc *disc) {
  time_t t;
  static double next_radius = 6;
  srand((unsigned) time(&t));
  GRect frame = window_frame;
  static int vel = 0;
  static int pos = -10;
  int rx=10+(rand()%frame.size.w); 
  //disc->pos.x = frame.size.w/2;
  disc->pos.x = rx;
  //disc->pos.y = frame.size.h/2;
  disc->pos.y = pos;
  disc->vel.x = 0;
  disc->vel.y = vel;
  disc->radius = next_radius;
  disc->mass = disc_calc_mass(disc);
#ifdef PBL_COLOR
  disc->color = GColorFromRGB(rand() % 255, rand() % 255, rand() % 255);
#endif
  vel += 5;
  pos += 5;
  //next_radius += 0.5;
}

static void disc_apply_force(Disc *disc, Vec2d force) {
  disc->vel.x += force.x / disc->mass;
  disc->vel.y += force.y / disc->mass;
}

static void disc_apply_accel(Disc *disc, AccelData accel) {
  disc_apply_force(disc, (Vec2d) {
    //.x = accel.x * ACCEL_RATIO,
    //.y = -accel.y * ACCEL_RATIO
    .x=0,
    .y =+v
  });
}

static void disc_update(Disc *disc) {
  double e = 0.5;

  if ((disc->pos.x - disc->radius < 0 && disc->vel.x < 0)
    || (disc->pos.x + disc->radius > window_frame.size.w && disc->vel.x > 0)) {
    disc->vel.x = -disc->vel.x * e;
  }

  if ((disc->pos.y - disc->radius < 0 && disc->vel.y < 0)
    || (disc->pos.y + disc->radius > window_frame.size.h && disc->vel.y > 0)) {
    disc->vel.y = -disc->vel.y * e;
  }
  
  if(disc->pos.x>x && disc->pos.x<(x+35) && disc->pos.y>120){
  int rx=10+(rand()%window_frame.size.w);
    disc->pos.x = rx;
    disc->pos.y = 0;
    
  disc->vel.x = 0;
  disc->vel.y = 0;
    //incrementamos contador
    score+=1;
    
    // --- Convertir a string--- 
    snprintf ( str_score ,  sizeof ( str_score ),  "%02d" , score ); 
    strcpy ( str_current_score , str_score ); 
    // --- Mostrar la hora actual: minuto en una TextLayer --- 
    text_layer_set_text ( text_layer , str_score );
    
    
    if(score < (base + 10) ){ v += 3; base+=10;}
    
    
  }
  else{
    disc->pos.x += disc->vel.x;
    disc->pos.y += disc->vel.y;
  }
  
  if (x < 0){
    x=0;
  }
  if(x> window_frame.size.w-30 ){
    x=window_frame.size.w-30;
  }
  
  if(disc->pos.y>window_frame.size.h - 10){
    int rx=10+(rand()%window_frame.size.w);
    disc->pos.x = rx;
    disc->pos.y = 0;
    
  disc->vel.x = 0;
  disc->vel.y = 0;
  }
}

static void disc_draw(GContext *ctx, Disc *disc) {
#ifdef PBL_COLOR
  graphics_context_set_fill_color(ctx, disc->color);
#else
  graphics_context_set_fill_color(ctx, GColorWhite);
#endif
  graphics_fill_circle(ctx, GPoint(disc->pos.x, disc->pos.y), disc->radius);
  
   GRect rect1;
    rect1.origin = GPoint(x,y);
    rect1.size = GSize(35,10);
    graphics_fill_rect(ctx, rect1, 0, GCornerNone);
  
    GRect rect2;
    rect2.origin = GPoint(x+5,y+10);
    rect2.size = GSize(25,10);
    graphics_fill_rect(ctx, rect2, 0, GCornerNone);
  
  GRect rect3;
    rect3.origin = GPoint(x+10,y+20);
    rect3.size = GSize(15,10);
    graphics_fill_rect(ctx, rect3, 0, GCornerNone);
  
}

static void disc_layer_update_callback(Layer *me, GContext *ctx) {
  for (int i = 0; i < NUM_DISCS; i++) {
    
    
    disc_draw(ctx, &disc_array[i]);
  }
}

static void timer_callback(void *data) {
  AccelData accel = (AccelData) { .x = 0, .y = 0, .z = 0 };
  accel_service_peek(&accel);
  
  //x le agrega el valor del acelerometro 
  if(accel.x > 0){x=x+10;}
  else{ x=x-10;}
  

  for (int i = 0; i < NUM_DISCS; i++) {
    Disc *disc = &disc_array[i];
    disc_apply_accel(disc, accel);
    disc_update(disc);
  }

  layer_mark_dirty(s_disc_layer);

  app_timer_register(ACCEL_STEP_MS, timer_callback, NULL);
}

static void main_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect frame = window_frame = layer_get_frame(window_layer);

  s_disc_layer = layer_create(frame);
  layer_set_update_proc(s_disc_layer, disc_layer_update_callback);
  layer_add_child(window_layer, s_disc_layer);

  for (int i = 0; i < NUM_DISCS; i++) {
    disc_init(&disc_array[i]);
  }
}

static void main_window_unload(Window *window) {
  layer_destroy(s_disc_layer);
}

static void init(void) {
  s_main_window = window_create();
  window_set_background_color(s_main_window, GColorBlack);
  window_set_window_handlers(s_main_window, (WindowHandlers) {
    .load = main_window_load,
    .unload = main_window_unload
  });

  // Create a window and text layer
	
	text_layer = text_layer_create(GRect(0, 0, 30, 20));
	
	// Set the text, font, and text alignment
	text_layer_set_text(text_layer, "0");
	text_layer_set_font(text_layer, fonts_get_system_font(FONT_KEY_GOTHIC_14_BOLD));
	text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);
	
	// Add the text layer to the window
	layer_add_child(window_get_root_layer(s_main_window), text_layer_get_layer(text_layer));

	// Push the window
	window_stack_push(s_main_window, true);
  accel_data_service_subscribe(0, NULL);

  app_timer_register(ACCEL_STEP_MS, timer_callback, NULL);
}

static void deinit(void) {
  accel_data_service_unsubscribe();
  // Destroy the text layer
	text_layer_destroy(text_layer);
  
  window_destroy(s_main_window);
}

int main(void) {
  init();
  
  app_event_loop();
  deinit();
}


